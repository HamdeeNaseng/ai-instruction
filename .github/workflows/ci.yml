name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: macos-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.8"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov black flake8

      - name: Run code formatting check
        run: |
          black --check --diff src/ tests/

      - name: Run linting
        run: |
          flake8 src/ tests/ --max-line-length=88

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src/claude_api_demos --cov-report=xml --cov-report=html
        env:
          # Mock API key for testing
          ANTHROPIC_API_KEY: "mock-api-key-for-testing"

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Test package installation
        run: |
          pip install --editable .
          python -c "import claude_api_demos; print(f'Package version: {claude_api_demos.__version__}')"

      - name: Test CLI functionality
        run: |
          python -m claude_api_demos.cli --help || true
          python run_demos.py --help || true
        env:
          ANTHROPIC_API_KEY: "mock-api-key-for-testing"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check

      - name: Run bandit security check
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          cat bandit-report.json

  docs-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check markdown files
        uses: DavidAnson/markdownlint-cli2-action@v13
        with:
          globs: "**/*.md"
          config: |
            {
              "MD013": false,
              "MD033": false,
              "MD041": false
            }

      - name: Check links in documentation
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          check-modified-files-only: "yes"

  build-package:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run integration tests
        run: |
          # Test basic imports
          python -c "from claude_api_demos import ClaudeClient, AdvancedClaudeDemo, RDAnalyticsAssistant"

          # Test CLI help
          python run_demos.py basic 2>&1 | grep -q "ANTHROPIC_API_KEY not found" || exit 1

          # Test package structure
          python -c "import claude_api_demos; assert hasattr(claude_api_demos, '__version__')"
        env:
          ANTHROPIC_API_KEY: "" # Intentionally empty to test error handling
